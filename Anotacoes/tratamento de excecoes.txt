Tratamento de exceções:

	O que são Exceções?

- Uma exceção é qualquer condição de erro ou comportamento inesperado encontrado por um programa em execução.
- No .NET, uma exceção é um objeto herdado da classe System.Exception.
- Quando lançada, uma exceção é propagada na pilha de chamadas de métodos em execução, até que seja capturada (tratada)
ou o programa seja encerrado.

	Por que exceções?

- O modelo de tratamento de exceções permite que erros sejam tratados de forma consistente e flexível, usando boas práticas.
	Vantagens:

- Delega a lógica do erro para a classe / método responsável por conhecer as regras que podem ocasionar o erro
- Trata de forma organizada (inclusive hierárquica) exceções de tipos diferentes
- A exceção pode carregar dados quaisquer

	Estrutura "TRY-CATCH":

- BLOCO TRY
	- Contém o código que representa a execução normal do trecho de código que pode acarretar em uma execução.
- BLOCO CACTH
	- Contém o código a ser executado caso uma exceção ocorra.
	- Deve ser especificado o tipo da exceção a ser tratada (upcasting é permitido)

	SINTAXE:

	try {

	}
	catch (ExceptionType e) {

	}
	catch (ExceptionType e) {

	}
	catch (ExceptionType e) {

	}

- BLOCO FINALLY
	- É um bloco qu contém código a ser executado independentemente de ter ocorrido ou não uma exceção.
	- Exemplo clássico: fechar um arquivo ou conexão de banco de dados ao final do processamento.
	
	SINTAXE:

	try {

	}
	catch (Exception e) {

	}
	finally {

	}
 

- Cláusula Throw: lança a exceção / "corta" o método

- O modelo de tratamento de exceções permite que erros sejam tratados de forma consistente e flexível, usando boas práticas.

	Vantagens: 
- Lógica delegada
- Construtores podem ter exceções
- Código mais simples. Não há aninhamento de condicionais: a qualquer momento que uma exceção for disparada, a execução é
interrompida e cai no bloco catch correspondente
- É possível capturar inclusive outras exceções de sistema